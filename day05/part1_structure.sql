-- part1_structure.sql
-- 데이터베이스의 설계 3단계
-- 1. 개념적 설계
-- 개념적 설계란 전체적인 테이블을 구성할 때 어떤 대상들을
-- 주로 다루는지를 정의하는 단계다.
-- 각각의 대상, 객체들의 정보를 컬럼, 속성으로 설정하여
-- 각 대상간의 관계를 명확히 파악하고자 함이다.
-- 데이터베이스를 만드는 목적과 그 요구사항을
-- 일반인도 알아들을 수 있을 만큼 개념적으로만 설계하는 단계이다.

-- 이때 고려해야 할 부분은 각 테이블 간의 관계 설정과
-- 기본키와 외래키(참조키)의 설정이다.
-- 기본키(PK)는 해당 테이블의 데이터 행(레코드)를 고유하게 식별하는 식별자이며
-- 외래키(FK)는 다른 테이블의 레코드를 참조한 값을 통해 서로의
-- 관계를 시스템적으로 연결하는 키를 가리킨다.
-- PK와 FK의 설정과 연결을 통해 참조 무결성을 보장한다.

-- 1. 게시판(BOARD) 서비스를 제공한다고 했을 때
-- 2. 게시판의 이용자(MEMBER)가 있을 것이다.
-- 3. 게시판에 게시글을 작성하는 작성자는 이용자(MEMBER)이므로
-- 4. 게시판 테이블은 이용자 테이블 이후에 만들어지고
-- 이용자 테이블에 대한 참조키가 필요할 것이다.

-- 2단계 논리적 설계(Logical Design)
-- 개념적 설계에서 도출된 모델, 구조를 관계형 데이터베이스의 형태에 맞게
-- 가공 및 정규화를 실행하는 단계다.
-- 이 단계에서 정규화(nomalization)를 통해 무결성을 유지하고 
-- 데이터의 중복 삽입을 최소화하는 것이 중요하다.

-- 무결성이란?
-- 결함이 없는 성질을 가리키는 말로, 같은 개체에 대해서 한 곳에서만 그 값의
-- 입력과 변경, 삭제를 관리함으로써 참조 무결성을 달성, 데이터를 일관되게 
-- 유지하는 데 목적이 있다.
-- 한 곳에서만 관리되기 때문에 개체 무결성을 달성할 수 있다.
-- 각 필드, 컬럼의 값이 정의된 데이터타입과 그 범위를 준수하도록 시스템적으로
-- 보장 -> 도메인 무결성
-- 사용자 정의 무결성: 설계 단계에서 요구하는 사항에 대한 특정 제약 조건을
-- 적용함으로써 특수한 설계를 통해 무결성을 유지
-- 예) 정수값이 아닌 PK를 직접 입력받는 특수한 설계,
-- 여러 컬럼을 조합키로 PK를 설정하는 특수한 경우

-- 정규화의 3단계와 특수 정규화
-- 정규화를 진행하는 이유는, 정규화를 하지 않았을 때 발생하는
-- 3가지의 이상 현상을 방지하려는 목적이다.
-- 이러한 이상 현상은 데이터를 직접 변경하지 않는 SELECT를 제외한 
-- CRUD 중 C, U, D에서 발생한다.
-- 1. 삽입이상
-- 데이터를 삽입(추가)할 때, 원치않는 정보까지 함께 추가해야 하는 이상현상
-- 2. 수정이상
-- 데이터를 수정할 때, 원치 않는 쓸데없는 정보까지 함께 수정해야 하는 이상현상
-- 3. 삭제이상
-- 데이터를 삭제할 때, 삭제되면 안 되는 정보까지 같이 삭제되는 이상현상

-- 이상현상을 방지하지 않고 방치했을 경우, 데이터의 무결성이 깨지고
-- 데이터가 손상되는 최악의 경우가 발생할 수 있다.
-- 간단히 말하면 쪼개서 관리하면 되는 정보를 하나의 테이블에 몰아서 관리했을 때
-- 주로 발생하는 이상현상인 것이다.
-- 이를 해결하는 것이 정규화를 통한 '테이블 쪼개기'이다.

-- 제1정규화
-- '컬럼 쪼개기'
-- 데이터의 원자성(atomic)을 보장하기 위해 각 컬럼의 값이 더이상 쪼갤 수 없는,
-- 분해할 수 없는 원자성을 가져야 한다는 규칙에 따라
-- 컬럼을 쪼개는 것을 가리킨다.
-- 예) 시, 군, 구의 정보를 '주소'라는 하나의 컬럼으로 관리하는 것이 아니라
-- 시 컬럼, 군구 컬럼, 상세주소 컬럼 등 쪼갤 수 있는 만큼 쪼개서 컬럼으로
-- 만드는 것을 제1정규화라고 한다.

-- 제2정규화
-- 제2정규화와 제3정규화는 '테이블 쪼개기'라고 부를 수 있다.
-- 다만, 제2정규화까지는 필수, 제3정규화는 성능 개선, 최적화 단계에서
-- 주로 진행된다.
-- 제2정규화는 제1정규형을 만족하면서 부분 종속성을 제거하는 것을 목적으로 한다.
-- * 부분 종속성이란, 기본키(PK)의 일부에만 종속(일부키)된 상태를 가리킨다.
-- 이런 경우와 같이 굳이 합쳐야 할 필요성이 없는 하나의 테이블에서
-- 일부키를 PK로 삼아 테이블을 분리해야 한다.(일부키는 정식명칭은 아님)
-- 예)주문 테이블:
-- - 고객번호, 주문번호, 제품명
--   1		 1 		  아아
-- 	 1 		 1 		  아샷추

-- 고객번호, 주문번호
-- 1		1

-- 주문번호, 제품명
-- 1		아아
-- 1		아샷추

-- 제3정규화
-- 제2정규화를 마친 대상에 대해서 기본키가 아닌 컬럼에 종속된 정보들을
-- 기본키를 FK로 하여 테이블을 쪼개는 것을 가리킨다.
-- 필수적인 절차는 아니며, 일반적으로 테이블의 컬럼이 너무 많거나
-- 특정 주제로 여러 컬럼이 있을 경우 쪼개서 관리해야 할 때 진행된다.
-- 예) 고객 테이블에서 고객 신체정보 테이블, 고객 주소정보 테이블 등을
-- 따로 관리하고 필요할 때만 하나의 테이블로 합쳐서 보는 방식을 취한다.
-- 만약 신체정보와 주소정보를 모두 고객 테이블에서 관리하게 되면
-- 단순히 이름만 필요한데도 신체정보와 주소정보까지 같이 조회하는
-- 성능떨어지는 행동을 하게 된다.
-- 결론: 필요할 때만 합쳐서 사용하자. -> 반정규화

-- 설계 3단계 물리적 설계
-- 데이터베이스가 실제 저장매체(HDD, SSD)에 효율적으로 저장되도록 구조 설계
-- RAID 구성 및 인덱스, 파티셔닝 등의 성능과 백업을 중점으로 하는
-- 설계가 이것에 해당한다.

-- 정리
-- 결론은 각 단계는 데이터베이스의 구조화와 효율적 운영을 결정짓는
-- 중요한 과정이다.
-- 개념적 설계: 현실 세계의 모델을 데이터베이스화 하는 것이 중점
-- 논리적 설계: 정규화를 통해 데이터의 무결성과 최적화를 위한 필수 단계
-- 물리적 설계: 성능 향상과 구조적 효율성에 중점